* Openscad Clojure

  
[[../../actions/workflows/build.yml/badge.svg]]


  This is a simple clojure project that is used for generating openscad designs.
  It relies on https://github.com/farrellm/scad-clj and is inspired by http://adereth.github.io/blog/2014/04/09/3d-printing-with-clojure/.

** Usage

   Edit core.clj is that your design is defined in the `design` variable. Then you can just run.

   #+begin_src sh
   lein run
   #+end_src

   By running the project the generating scad file will be found under the root directory of the project.

   
** Development

*** Using auto run

    To automatically re-generate the scad file each time the `core.clj` gets update the project is using the [[https://github.com/weavejester/lein-auto][lein-auto plugin]].
    The plugin will automatically run a command each time the project is saved. To enable it:

    #+begin_src sh
    lein auto run
    #+end_src

*** Using Emacs

    Most emacs users will want to use cider and evaluate the clojure code directly from the source.
    
    The steps are:

    - Use command `cider-jack-in` to start the repl.
    - Use command `cider-eval-buffer` to evaluate the buffer.
    - Go to the end og `(generate) in the main function and call `cide-eval-last-sexp`.

    This will update the design and regenerate the scad file.

****  Emacs setup for clojure

     The code below installs and sets up `clojure-mode` and `cider`.
     
    #+begin_src emacs-lisp
(use-package clojure-mode
  :defer t
  :init
  (defconst clojure--prettify-symbols-alist '(("fn"   . ?Î»)))
  :hook (clojure-mode . global-prettify-symboles-mode)
  :bind ( :map clojure-mode-map
               ("C-c d f" . cider-code)
               ("C-c d g" . cider-grimoire)
               ("C-c d w" . cider-grimoire-web)
               ("C-c d c" . clojure-cheatsheet)
               ("C-c d d" . dash-at-point)
               ("C-c e b" . cider-eval-buffer)
               ("C-c e r" . cider-eval-region)
               ("C-c e s" . cider-eval-last-sexp)
               ("C-x e" . cider-eval-last-sexp)))

(use-package cider
  :commands (cider cider-connect cider-jack-in)
  :init
  (setq cider-auto-select-error-buffer t
        cider-repl-pop-to-buffer-on-connect nil
        cider-repl-use-clojure-font-lock t
        cider-repl-wrap-history t
        cider-repl-history-size 1000
        cider-show-error-buffer t
        nrepl-hide-special-buffers t
        ;; Stop error buffer from popping up while working in buffers other than the REPL:
        nrepl-popup-stacktraces nil)
  :hook ((cider-mode . company-mode)
         (cider-repl-mode . company-mode))
  :bind (:map cider-mode-map
              ("C-c C-v C-c" . cider-send-and-evaluate-sexp)
              ("C-c C-p"     . cider-eval-print-last-sexp)))
    #+end_src
    
